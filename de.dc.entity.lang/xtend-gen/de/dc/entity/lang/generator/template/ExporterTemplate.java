package de.dc.entity.lang.generator.template;

import de.dc.entity.lang.generator.template.IGenerator;
import de.dc.entity.model.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ExporterTemplate implements IGenerator<Entity> {
  @Override
  public String filename(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = t.getName();
    _builder.append(_name);
    _builder.append("Exporter");
    return _builder.toString();
  }
  
  @Override
  public String gen(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packagePath = t.getPackagePath();
    _builder.append(_packagePath);
    _builder.append(".util;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.nio.charset.StandardCharsets;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.commons.io.FileUtils;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javafx.scene.control.TableView;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = t.getName();
    _builder.append(_name);
    _builder.append("Exporter {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public enum Type{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HTML,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EXCEL,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TEXT");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void export(Type type, TableView<?> table, File file) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch (type) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case EXCEL:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("exportToExcel(table, file);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case HTML:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("exportToHtml(table, file);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case TEXT:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("exportToText(table, file);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void exportToText(TableView<?> table, File file) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void exportToExcel(TableView<?> table, File file) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void exportToHtml(TableView<?> table, File file) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder sb = new StringBuilder(\"<!DOCTYPE html>\").append(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\"><head><meta charset=\\\"utf-8\\\" />\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"<title>DataTables View</title>\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"<link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\\\">\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\\\"></script>\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"<script src=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\\\"></script>\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"<link rel=\\\"stylesheet\\\" href=\\\"https://cdn.datatables.net/1.10.12/css/jquery.dataTables.min.css\\\">\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"<script src=\\\"https://cdn.datatables.net/1.10.12/js/jquery.dataTables.min.js\\\"></script>\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"<script>$(document).ready(function() {$(\'table.display\').DataTable();});</script>\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".append(\"</head>\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\"<body>\").append(\"\\n\").append(\"<table class=\\\"display\\\" style=\\\"width:100%\\\">\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\"<thead><tr>\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int j = 0; j < table.getVisibleLeafColumns().size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"<th>\" + table.getVisibleLeafColumns().get(j).getText() + \"</th>\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\"</tr></thead>\\n\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\"<tbody>\\n\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < table.getItems().size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"<tr>\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int j = 0; j < table.getVisibleLeafColumns().size(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (table.getVisibleLeafColumns().get(j).getCellData(i) != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("sb.append(\"<td>\" + table.getVisibleLeafColumns().get(j).getCellData(i).toString() + \"</td>\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("sb.append(\"<td></td>\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"</tr>\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\"</tbody></table></body>\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("FileUtils.write(file, sb.toString(), StandardCharsets.UTF_8);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
