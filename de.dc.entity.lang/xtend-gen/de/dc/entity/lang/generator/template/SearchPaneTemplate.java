package de.dc.entity.lang.generator.template;

import de.dc.entity.lang.generator.template.IGenerator;
import de.dc.entity.model.Entity;
import de.dc.entity.model.Field;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class SearchPaneTemplate implements IGenerator<Entity> {
  @Override
  public String filename(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    String _firstUpper = StringExtensions.toFirstUpper(t.getName());
    _builder.append(_firstUpper);
    _builder.append("SearchPane");
    return _builder.toString();
  }
  
  @Override
  public String gen(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packagePath = t.getPackagePath();
    _builder.append(_packagePath);
    _builder.append(".filter;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javafx.collections.FXCollections;");
    _builder.newLine();
    _builder.append("import javafx.collections.ObservableList;");
    _builder.newLine();
    _builder.append("import javafx.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import javafx.fxml.FXML;");
    _builder.newLine();
    _builder.append("import javafx.fxml.FXMLLoader;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.Button;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.CheckBox;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.ComboBox;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.Hyperlink;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.TextField;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.HBox;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.VBox;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.Optional;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(t.getName());
    _builder.append(_firstUpper);
    _builder.append("SearchPane extends VBox{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@FXML");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected VBox paneContent;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@FXML");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Button buttonAccept;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@FXML");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Hyperlink linkCancel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@FXML");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected VBox root;");
    _builder.newLine();
    {
      EList<Field> _field = t.getField();
      for(final Field field : _field) {
        _builder.append("    ");
        _builder.append("@FXML");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("protected HBox hbox");
        String _firstUpper_1 = StringExtensions.toFirstUpper(field.getName());
        _builder.append(_firstUpper_1, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@FXML");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("protected CheckBox checkbox");
        String _firstUpper_2 = StringExtensions.toFirstUpper(field.getName());
        _builder.append(_firstUpper_2, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@FXML");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("protected ComboBox<");
        String _firstUpper_3 = StringExtensions.toFirstUpper(t.getName());
        _builder.append(_firstUpper_3, "    ");
        _builder.append("SearchType> combobox");
        String _firstUpper_4 = StringExtensions.toFirstUpper(field.getName());
        _builder.append(_firstUpper_4, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@FXML");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("protected TextField text");
        String _firstUpper_5 = StringExtensions.toFirstUpper(field.getName());
        _builder.append(_firstUpper_5, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ObservableList<");
    String _firstUpper_6 = StringExtensions.toFirstUpper(t.getName());
    _builder.append(_firstUpper_6, "    ");
    _builder.append("SearchContent> content = FXCollections.observableArrayList();");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String FXML = \"/");
    String _replace = t.getPackagePath().replace(".", "/");
    _builder.append(_replace, "\t");
    _builder.append("/filter/");
    String _firstUpper_7 = StringExtensions.toFirstUpper(t.getName());
    _builder.append(_firstUpper_7, "\t");
    _builder.append("SearchPane.fxml\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _firstUpper_8 = StringExtensions.toFirstUpper(t.getName());
    _builder.append(_firstUpper_8, "\t");
    _builder.append("SearchPane() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(FXML));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fxmlLoader.setRoot(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fxmlLoader.setController(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fxmlLoader.load();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException exception) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("exception.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Field> _field_1 = t.getField();
      for(final Field field_1 : _field_1) {
        _builder.append("\t\t");
        _builder.append("hbox");
        String _firstUpper_9 = StringExtensions.toFirstUpper(field_1.getName());
        _builder.append(_firstUpper_9, "\t\t");
        _builder.append(".disableProperty().bind(checkbox");
        String _firstUpper_10 = StringExtensions.toFirstUpper(field_1.getName());
        _builder.append(_firstUpper_10, "\t\t");
        _builder.append(".selectedProperty().not());");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("combobox");
        String _firstUpper_11 = StringExtensions.toFirstUpper(field_1.getName());
        _builder.append(_firstUpper_11, "\t\t");
        _builder.append(".setItems(FXCollections.observableArrayList(");
        String _firstUpper_12 = StringExtensions.toFirstUpper(t.getName());
        _builder.append(_firstUpper_12, "\t\t");
        _builder.append("SearchType.values()));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("combobox");
        String _firstUpper_13 = StringExtensions.toFirstUpper(field_1.getName());
        _builder.append(_firstUpper_13, "\t\t");
        _builder.append(".getSelectionModel().selectFirst();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@FXML");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onActionEvent(ActionEvent event) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (event.getSource()==buttonAccept) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("content.clear();");
    _builder.newLine();
    {
      EList<Field> _field_2 = t.getField();
      for(final Field field_2 : _field_2) {
        _builder.append("\t\t\t");
        _builder.append("if(checkbox");
        String _firstUpper_14 = StringExtensions.toFirstUpper(field_2.getName());
        _builder.append(_firstUpper_14, "\t\t\t");
        _builder.append(".isSelected()){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("String value = text");
        String _firstUpper_15 = StringExtensions.toFirstUpper(field_2.getName());
        _builder.append(_firstUpper_15, "\t\t\t\t");
        _builder.append(".getText();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("String name = checkbox");
        String _firstUpper_16 = StringExtensions.toFirstUpper(field_2.getName());
        _builder.append(_firstUpper_16, "\t\t\t\t");
        _builder.append(".getText();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        String _firstUpper_17 = StringExtensions.toFirstUpper(t.getName());
        _builder.append(_firstUpper_17, "\t\t\t\t");
        _builder.append("SearchType type = combobox");
        String _firstUpper_18 = StringExtensions.toFirstUpper(field_2.getName());
        _builder.append(_firstUpper_18, "\t\t\t\t");
        _builder.append(".getSelectionModel().getSelectedItem();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("content.add(new ");
        String _firstUpper_19 = StringExtensions.toFirstUpper(t.getName());
        _builder.append(_firstUpper_19, "\t\t\t\t");
        _builder.append("SearchContent(name, value, type));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String select = \"SELECT * FROM CONTACT WHERE \";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Optional<String> result = content.stream().map(e-> e.getName()+\" = \'\"+e.getValue()+\"\'\").reduce((e1,e2) -> e1 +\" OR \"+e2);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result.ifPresent(e-> System.out.println(select+e));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("root.toBack();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
