package de.dc.entity.lang.generator.template;

import de.dc.entity.lang.generator.template.IGenerator;
import de.dc.entity.model.Entity;
import de.dc.entity.model.Field;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class ExtendedDemoApplicationPaneTemplate implements IGenerator<Entity> {
  @Override
  public String filename(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Extended");
    String _name = t.getName();
    _builder.append(_name);
    _builder.append("ApplicationPane");
    return _builder.toString();
  }
  
  @Override
  public String gen(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packagePath = t.getPackagePath();
    _builder.append(_packagePath);
    _builder.append(".extended;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.log4j.Logger;");
    _builder.newLine();
    _builder.append("import ");
    String _packagePath_1 = t.getPackagePath();
    _builder.append(_packagePath_1);
    _builder.append(".repository.*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _packagePath_2 = t.getPackagePath();
    _builder.append(_packagePath_2);
    _builder.append(".model.*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _packagePath_3 = t.getPackagePath();
    _builder.append(_packagePath_3);
    _builder.append(".di.*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import javafx.beans.property.*;");
    _builder.newLine();
    _builder.append("import javafx.beans.value.*;");
    _builder.newLine();
    _builder.append("import javafx.collections.transformation.*;");
    _builder.newLine();
    _builder.append("import javafx.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import javafx.fxml.FXMLLoader;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Extended");
    String _name = t.getName();
    _builder.append(_name);
    _builder.append("ApplicationPane extends ExtendedBase");
    String _name_1 = t.getName();
    _builder.append(_name_1);
    _builder.append("ApplicationPane<");
    String _name_2 = t.getName();
    _builder.append(_name_2);
    _builder.append("> {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Logger log = Logger.getLogger(getClass());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String FXML = \"/");
    String _replace = t.getPackagePath().replace(".", "/");
    _builder.append(_replace, "\t");
    _builder.append("/extended/Extended");
    String _name_3 = t.getName();
    _builder.append(_name_3, "\t");
    _builder.append("ApplicationPane.fxml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected ");
    String _name_4 = t.getName();
    _builder.append(_name_4, "\t");
    _builder.append("FX context; ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("protected  ");
    String _name_5 = t.getName();
    _builder.append(_name_5, "\t");
    _builder.append("Repository ");
    String _firstLower = StringExtensions.toFirstLower(t.getName());
    _builder.append(_firstLower, "\t");
    _builder.append("Repository;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Extended");
    String _name_6 = t.getName();
    _builder.append(_name_6, "\t");
    _builder.append("ApplicationPane() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(FXML));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fxmlLoader.setRoot(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fxmlLoader.setController(this);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fxmlLoader.load();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException exception) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("log.error(\"Failed to load fxml \" + FXML, exception);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_1 = StringExtensions.toFirstLower(t.getName());
    _builder.append(_firstLower_1, "\t\t");
    _builder.append("Repository = ");
    String _name_7 = t.getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("Platform.getInstance(");
    String _name_8 = t.getName();
    _builder.append(_name_8, "\t\t");
    _builder.append("Repository.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.context = ");
    String _name_9 = t.getName();
    _builder.append(_name_9, "\t\t");
    _builder.append("Platform.getInstance(");
    String _name_10 = t.getName();
    _builder.append(_name_10, "\t\t");
    _builder.append("FX.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("context.getMasterData().addAll(personRepository.findAll());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SortedList<Person> sortedData = new SortedList<>(context.getFilteredMasterData());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sortedData.comparatorProperty().bind(tableView.comparatorProperty());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tableView.setItems(sortedData);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void initialize() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("textFieldSearch.textProperty().addListener(this::onSearchTextChanged);");
    _builder.newLine();
    {
      EList<Field> _field = t.getField();
      for(final Field field : _field) {
        _builder.append("\t\t");
        _builder.append("setupCellValueFactory(column");
        String _firstUpper = StringExtensions.toFirstUpper(field.getName());
        _builder.append(_firstUpper, "\t\t");
        _builder.append(", e-> new SimpleObjectProperty(e.get");
        String _firstUpper_1 = StringExtensions.toFirstUpper(field.getName());
        _builder.append(_firstUpper_1, "\t\t");
        _builder.append("()));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void onSearchTextChanged(ObservableValue<? extends String> observable, String oldValue, String newValue) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("context.getFilteredMasterData().setPredicate(p->{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("boolean isEmpty = newValue==null || newValue.isEmpty();");
    _builder.newLine();
    {
      EList<Field> _field_1 = t.getField();
      for(final Field field_1 : _field_1) {
        {
          boolean _isRequired = field_1.isRequired();
          if (_isRequired) {
            _builder.append("\t\t\t");
            _builder.append("boolean contains");
            String _name_11 = field_1.getName();
            _builder.append(_name_11, "\t\t\t");
            _builder.append(" = String.valueOf(p.get");
            String _name_12 = field_1.getName();
            _builder.append(_name_12, "\t\t\t");
            _builder.append("()).toLowerCase().contains(newValue.toLowerCase());");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    final Function1<Field, Boolean> _function = (Field it) -> {
      return Boolean.valueOf(it.isRequired());
    };
    final Function1<Field, String> _function_1 = (Field it) -> {
      String _name_13 = it.getName();
      return ("contains" + _name_13);
    };
    final Function2<String, String, String> _function_2 = (String p1, String p2) -> {
      return ((p1 + " || ") + p2);
    };
    final String contains = IterableExtensions.<String>reduce(IterableExtensions.<Field, String>map(IterableExtensions.<Field>filter(t.getField(), _function), _function_1), _function_2);
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return isEmpty ");
    {
      final Function1<Field, Boolean> _function_3 = (Field it) -> {
        return Boolean.valueOf(it.isRequired());
      };
      int _size = IterableExtensions.size(IterableExtensions.<Field>filter(t.getField(), _function_3));
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("||");
      }
    }
    _builder.append(" ");
    _builder.append(contains, "\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void onMenuItemAction(ActionEvent event) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Object source = event.getSource();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (source == menuItemClipboard) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchTableRowToClipboard();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemExportToExcel) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchExportToExcel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemExportToHtml) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchExportToHtml();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemExportToText) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchExportToText();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemOpenDetailsDeialog) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchOpenDetailsDialog();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemOpenSearchDialog) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchOpenSearchDialog();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchOpenDetailsDialog() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchOpenSearchDialog() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchExportToText() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchExportToHtml() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchExportToExcel() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchTableRowToClipboard() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
