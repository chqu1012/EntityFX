package de.dc.entity.lang.generator.template;

import de.dc.entity.lang.generator.template.IGenerator;
import de.dc.entity.model.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ExtendedDemoApplicationPaneTemplate implements IGenerator<Entity> {
  @Override
  public String filename(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Extended");
    String _name = t.getName();
    _builder.append(_name);
    _builder.append("ApplicationPane");
    return _builder.toString();
  }
  
  @Override
  public String gen(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packagePath = t.getPackagePath();
    _builder.append(_packagePath);
    _builder.append(".extended;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.log4j.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    String _packagePath_1 = t.getPackagePath();
    _builder.append(_packagePath_1);
    _builder.append(".model.*;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javafx.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import javafx.fxml.FXMLLoader;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Extended");
    String _name = t.getName();
    _builder.append(_name);
    _builder.append("ApplicationPane extends ExtendedBase");
    String _name_1 = t.getName();
    _builder.append(_name_1);
    _builder.append("ApplicationPane<");
    String _name_2 = t.getName();
    _builder.append(_name_2);
    _builder.append("> {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Logger log = Logger.getLogger(getClass());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String FXML = \"/");
    String _replace = t.getPackagePath().replace(".", "/");
    _builder.append(_replace, "\t");
    _builder.append("/extended/Extended");
    String _name_3 = t.getName();
    _builder.append(_name_3, "\t");
    _builder.append("ApplicationPane.fxml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Extended");
    String _name_4 = t.getName();
    _builder.append(_name_4, "\t");
    _builder.append("ApplicationPane() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(FXML));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fxmlLoader.setRoot(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fxmlLoader.setController(this);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fxmlLoader.load();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException exception) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("log.error(\"Failed to load fxml \" + FXML, exception);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void onMenuItemAction(ActionEvent event) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Object source = event.getSource();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (source == menuItemClipboard) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchTableRowToClipboard();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemExportToExcel) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchExportToExcel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemExportToHtml) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchExportToHtml();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemExportToText) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchExportToText();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemOpenDetailsDeialog) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchOpenDetailsDialog();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (source == menuItemOpenSearchDialog) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dispatchOpenSearchDialog();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchOpenDetailsDialog() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchOpenSearchDialog() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchExportToText() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchExportToHtml() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchExportToExcel() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void dispatchTableRowToClipboard() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
