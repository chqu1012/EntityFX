package de.dc.entity.lang.generator.template;

import de.dc.entity.lang.generator.template.IGenerator;
import de.dc.entity.model.Entity;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class BaseRepositoryTemplates implements IGenerator<Entity> {
  @Override
  public String filename(final Entity t) {
    return "BaseRepository";
  }
  
  @Override
  public String gen(final Entity t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packagePath = t.getPackagePath();
    _builder.append(_packagePath);
    _builder.append(".repository;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.sql.*;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.logging.Level;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import org.apache.commons.lang.StringUtils;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract class BaseRepository<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Logger log = Logger.getLogger(getClass().getSimpleName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private List<T> cachedList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String JDBC_URL = \"");
    String _jdbcUrl = t.getRepository().getJdbcUrl();
    _builder.append(_jdbcUrl, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public BaseRepository() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Class.forName(\"org.h2.Driver\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (ClassNotFoundException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to load H2 driver!\", e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public Optional<T> findById(long id) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (cachedList.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return Optional.ofNullable(forceFindBy(id));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Optional.ofNullable(forceFindBy(id));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public List<T> findAll() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (cachedList.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("cachedList = forceFindAll();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return cachedList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public List<T> query(String sql) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<T> list = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try (Connection connection = DriverManager.getConnection(JDBC_URL,\"SA\", \"SA\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PreparedStatement statement = connection.prepareStatement(sql);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ResultSet resultSet = statement.executeQuery()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while (resultSet.next()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("list.add(map(resultSet));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to query: \" + sql, e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return list;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("* Used for updates without result");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void queryExecute(String sql) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try (Connection connection = DriverManager.getConnection(JDBC_URL,\"SA\", \"SA\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Statement statement = connection.createStatement()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("statement.execute(sql);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to query: \" + sql, e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public List<T> forceFindAll() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<T> tempList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try (Connection connection = DriverManager.getConnection(JDBC_URL,\"SA\", \"SA\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PreparedStatement statement = connection.prepareStatement(findAllStatement() + orderBy());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ResultSet resultSet = statement.executeQuery()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while (resultSet.next()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("tempList.add(map(resultSet));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to query: \" + findAllStatement(), e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return tempList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public T forceFindBy(long id) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try (Connection conn = DriverManager.getConnection(JDBC_URL, \"SA\",\"SA\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PreparedStatement statement = conn.prepareStatement(findByIdStatement(id));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ResultSet resultSet = statement.executeQuery();) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (resultSet.next()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return map(resultSet);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to query: \" + findByIdStatement(id), e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract T map(ResultSet resultSet) throws SQLException;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract String findByIdStatement(long id);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract String findAllStatement();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract String saveStatement();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract String deleteStatement();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract String updateStatement();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract void prepareStatetmentForSave(T t, PreparedStatement statement) throws SQLException;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract void prepareStatetmentForUpdate(T t, PreparedStatement statement) throws SQLException;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected abstract void prepapreStatementForDelete(T t, PreparedStatement statement) throws SQLException;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public String orderBy() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return StringUtils.EMPTY;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void delete(T t) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try (Connection connection = DriverManager.getConnection(JDBC_URL,\"SA\", \"SA\"); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PreparedStatement statement = connection.prepareStatement(deleteStatement())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("prepapreStatementForDelete(t, statement);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("statement.execute();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("cachedList.remove(t);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.ALL, \"Delete attachment: \" + deleteStatement());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to query: \" + saveStatement(), e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public long save(T t) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try (Connection connection = DriverManager.getConnection(JDBC_URL, \"SA\", \"SA\"); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PreparedStatement statement = connection.prepareStatement(saveStatement())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("prepareStatetmentForSave(t, statement);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("cachedList.add(t);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("statement.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ResultSet rs = statement.getGeneratedKeys();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while (rs.next()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return rs.getLong(1);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.ALL, \"Save attachment: \" + saveStatement());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to query: \" + saveStatement(), e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return -1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public long update(T t) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try (Connection connection = DriverManager.getConnection(JDBC_URL, \"SA\", \"SA\"); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PreparedStatement statement = connection.prepareStatement(updateStatement())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("prepareStatetmentForUpdate(t, statement);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("statement.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ResultSet rs = statement.getGeneratedKeys();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while (rs.next()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return rs.getLong(1);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.ALL, \"Update attachment: \" + updateStatement());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.log(Level.SEVERE, \"Failed to query: \" + updateStatement(), e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return -1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
