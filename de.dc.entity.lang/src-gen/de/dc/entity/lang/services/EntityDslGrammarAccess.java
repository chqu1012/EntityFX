/*
 * generated by Xtext 2.17.0
 */
package de.dc.entity.lang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EntityDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackagePathKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackagePathAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackagePathQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackagePathAssignment_1_1.eContents().get(0);
		private final Keyword cEntityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUseSpringKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUseSpringAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUseSpringEBooleanParserRuleCall_5_1_0 = (RuleCall)cUseSpringAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUseHistoryKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cUseHistoryAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cUseHistoryEBooleanParserRuleCall_6_1_0 = (RuleCall)cUseHistoryAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cFieldAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cFieldFieldParserRuleCall_7_0_0 = (RuleCall)cFieldAssignment_7_0.eContents().get(0);
		private final Assignment cFieldAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFieldFieldParserRuleCall_7_1_0 = (RuleCall)cFieldAssignment_7_1.eContents().get(0);
		private final Assignment cRepositoryAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRepositoryRepositoryParserRuleCall_8_0 = (RuleCall)cRepositoryAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Entity:
		//	{Entity} ('packagePath' packagePath=QualifiedName)?
		//	'Entity'
		//	name=EString
		//	'{' ('useSpring:' useSpring=EBoolean)? ('useHistory:' useHistory=EBoolean)? (field+=Field field+=Field*)?
		//	repository=Repository?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Entity} ('packagePath' packagePath=QualifiedName)? 'Entity' name=EString '{' ('useSpring:' useSpring=EBoolean)?
		//('useHistory:' useHistory=EBoolean)? (field+=Field field+=Field*)? repository=Repository? '}'
		public Group getGroup() { return cGroup; }
		
		//{Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }
		
		//('packagePath' packagePath=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'packagePath'
		public Keyword getPackagePathKeyword_1_0() { return cPackagePathKeyword_1_0; }
		
		//packagePath=QualifiedName
		public Assignment getPackagePathAssignment_1_1() { return cPackagePathAssignment_1_1; }
		
		//QualifiedName
		public RuleCall getPackagePathQualifiedNameParserRuleCall_1_1_0() { return cPackagePathQualifiedNameParserRuleCall_1_1_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_2() { return cEntityKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('useSpring:' useSpring=EBoolean)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'useSpring:'
		public Keyword getUseSpringKeyword_5_0() { return cUseSpringKeyword_5_0; }
		
		//useSpring=EBoolean
		public Assignment getUseSpringAssignment_5_1() { return cUseSpringAssignment_5_1; }
		
		//EBoolean
		public RuleCall getUseSpringEBooleanParserRuleCall_5_1_0() { return cUseSpringEBooleanParserRuleCall_5_1_0; }
		
		//('useHistory:' useHistory=EBoolean)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'useHistory:'
		public Keyword getUseHistoryKeyword_6_0() { return cUseHistoryKeyword_6_0; }
		
		//useHistory=EBoolean
		public Assignment getUseHistoryAssignment_6_1() { return cUseHistoryAssignment_6_1; }
		
		//EBoolean
		public RuleCall getUseHistoryEBooleanParserRuleCall_6_1_0() { return cUseHistoryEBooleanParserRuleCall_6_1_0; }
		
		//(field+=Field field+=Field*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//field+=Field
		public Assignment getFieldAssignment_7_0() { return cFieldAssignment_7_0; }
		
		//Field
		public RuleCall getFieldFieldParserRuleCall_7_0_0() { return cFieldFieldParserRuleCall_7_0_0; }
		
		//field+=Field*
		public Assignment getFieldAssignment_7_1() { return cFieldAssignment_7_1; }
		
		//Field
		public RuleCall getFieldFieldParserRuleCall_7_1_0() { return cFieldFieldParserRuleCall_7_1_0; }
		
		//repository=Repository?
		public Assignment getRepositoryAssignment_8() { return cRepositoryAssignment_8; }
		
		//Repository
		public RuleCall getRepositoryRepositoryParserRuleCall_8_0() { return cRepositoryRepositoryParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDatatypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDatatypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDatatypeJvmTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cDatatypeAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRequiredKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRequiredAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRequiredEBooleanParserRuleCall_5_1_0 = (RuleCall)cRequiredAssignment_5_1.eContents().get(0);
		private final Keyword cCommaKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUseByTableViewKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cUseByTableViewAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cUseByTableViewEBooleanParserRuleCall_6_1_0 = (RuleCall)cUseByTableViewAssignment_6_1.eContents().get(0);
		private final Keyword cCommaKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cUseByRepositoryKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cUseByRepositoryAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cUseByRepositoryEBooleanParserRuleCall_7_1_0 = (RuleCall)cUseByRepositoryAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cControlAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cControlFXControlParserRuleCall_9_0 = (RuleCall)cControlAssignment_9.eContents().get(0);
		
		//Field:
		//	{Field}
		//	'Field'
		//	'(' ('name:' name=EString ','?)? ('datatype:' datatype=JvmTypeReference ','?)? ('required:' required=EBoolean ','?)?
		//	('useByTableView:' useByTableView=EBoolean ','?)? ('useByRepository:' useByRepository=EBoolean)?
		//	')'
		//	control=FXControl?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Field} 'Field' '(' ('name:' name=EString ','?)? ('datatype:' datatype=JvmTypeReference ','?)? ('required:'
		//required=EBoolean ','?)? ('useByTableView:' useByTableView=EBoolean ','?)? ('useByRepository:'
		//useByRepository=EBoolean)? ')' control=FXControl?
		public Group getGroup() { return cGroup; }
		
		//{Field}
		public Action getFieldAction_0() { return cFieldAction_0; }
		
		//'Field'
		public Keyword getFieldKeyword_1() { return cFieldKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('name:' name=EString ','?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'name:'
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }
		
		//name=EString
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_1_0() { return cNameEStringParserRuleCall_3_1_0; }
		
		//','?
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//('datatype:' datatype=JvmTypeReference ','?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'datatype:'
		public Keyword getDatatypeKeyword_4_0() { return cDatatypeKeyword_4_0; }
		
		//datatype=JvmTypeReference
		public Assignment getDatatypeAssignment_4_1() { return cDatatypeAssignment_4_1; }
		
		//JvmTypeReference
		public RuleCall getDatatypeJvmTypeReferenceParserRuleCall_4_1_0() { return cDatatypeJvmTypeReferenceParserRuleCall_4_1_0; }
		
		//','?
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//('required:' required=EBoolean ','?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'required:'
		public Keyword getRequiredKeyword_5_0() { return cRequiredKeyword_5_0; }
		
		//required=EBoolean
		public Assignment getRequiredAssignment_5_1() { return cRequiredAssignment_5_1; }
		
		//EBoolean
		public RuleCall getRequiredEBooleanParserRuleCall_5_1_0() { return cRequiredEBooleanParserRuleCall_5_1_0; }
		
		//','?
		public Keyword getCommaKeyword_5_2() { return cCommaKeyword_5_2; }
		
		//('useByTableView:' useByTableView=EBoolean ','?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'useByTableView:'
		public Keyword getUseByTableViewKeyword_6_0() { return cUseByTableViewKeyword_6_0; }
		
		//useByTableView=EBoolean
		public Assignment getUseByTableViewAssignment_6_1() { return cUseByTableViewAssignment_6_1; }
		
		//EBoolean
		public RuleCall getUseByTableViewEBooleanParserRuleCall_6_1_0() { return cUseByTableViewEBooleanParserRuleCall_6_1_0; }
		
		//','?
		public Keyword getCommaKeyword_6_2() { return cCommaKeyword_6_2; }
		
		//('useByRepository:' useByRepository=EBoolean)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'useByRepository:'
		public Keyword getUseByRepositoryKeyword_7_0() { return cUseByRepositoryKeyword_7_0; }
		
		//useByRepository=EBoolean
		public Assignment getUseByRepositoryAssignment_7_1() { return cUseByRepositoryAssignment_7_1; }
		
		//EBoolean
		public RuleCall getUseByRepositoryEBooleanParserRuleCall_7_1_0() { return cUseByRepositoryEBooleanParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//control=FXControl?
		public Assignment getControlAssignment_9() { return cControlAssignment_9; }
		
		//FXControl
		public RuleCall getControlFXControlParserRuleCall_9_0() { return cControlFXControlParserRuleCall_9_0; }
	}
	public class FXControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.FXControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFXControlAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cControlKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cControlAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cControlJvmTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cControlAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColumnWidthKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnWidthAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColumnWidthEDoubleParserRuleCall_4_1_0 = (RuleCall)cColumnWidthAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBindingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBindingAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBindingBindingParserRuleCall_5_1_0 = (RuleCall)cBindingAssignment_5_1.eContents().get(0);
		private final Keyword cCommaKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTooltipKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTooltipAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTooltipEStringParserRuleCall_6_1_0 = (RuleCall)cTooltipAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDescriptionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_7_1_0 = (RuleCall)cDescriptionAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FXControl:
		//	{FXControl}
		//	'[' ('name:' name=EString ','?)? ('control:' control=JvmTypeReference ','?)? ('columnWidth:' columnWidth=EDouble
		//	','?)? ('binding:' binding=Binding ','?)? ('tooltip:' tooltip=EString)? ('description:' description=EString)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//{FXControl} '[' ('name:' name=EString ','?)? ('control:' control=JvmTypeReference ','?)? ('columnWidth:'
		//columnWidth=EDouble ','?)? ('binding:' binding=Binding ','?)? ('tooltip:' tooltip=EString)? ('description:'
		//description=EString)? ']'
		public Group getGroup() { return cGroup; }
		
		//{FXControl}
		public Action getFXControlAction_0() { return cFXControlAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//('name:' name=EString ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'name:'
		public Keyword getNameKeyword_2_0() { return cNameKeyword_2_0; }
		
		//name=EString
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0() { return cNameEStringParserRuleCall_2_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//('control:' control=JvmTypeReference ','?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'control:'
		public Keyword getControlKeyword_3_0() { return cControlKeyword_3_0; }
		
		//control=JvmTypeReference
		public Assignment getControlAssignment_3_1() { return cControlAssignment_3_1; }
		
		//JvmTypeReference
		public RuleCall getControlJvmTypeReferenceParserRuleCall_3_1_0() { return cControlJvmTypeReferenceParserRuleCall_3_1_0; }
		
		//','?
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//('columnWidth:' columnWidth=EDouble ','?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'columnWidth:'
		public Keyword getColumnWidthKeyword_4_0() { return cColumnWidthKeyword_4_0; }
		
		//columnWidth=EDouble
		public Assignment getColumnWidthAssignment_4_1() { return cColumnWidthAssignment_4_1; }
		
		//EDouble
		public RuleCall getColumnWidthEDoubleParserRuleCall_4_1_0() { return cColumnWidthEDoubleParserRuleCall_4_1_0; }
		
		//','?
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//('binding:' binding=Binding ','?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'binding:'
		public Keyword getBindingKeyword_5_0() { return cBindingKeyword_5_0; }
		
		//binding=Binding
		public Assignment getBindingAssignment_5_1() { return cBindingAssignment_5_1; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_5_1_0() { return cBindingBindingParserRuleCall_5_1_0; }
		
		//','?
		public Keyword getCommaKeyword_5_2() { return cCommaKeyword_5_2; }
		
		//('tooltip:' tooltip=EString)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'tooltip:'
		public Keyword getTooltipKeyword_6_0() { return cTooltipKeyword_6_0; }
		
		//tooltip=EString
		public Assignment getTooltipAssignment_6_1() { return cTooltipAssignment_6_1; }
		
		//EString
		public RuleCall getTooltipEStringParserRuleCall_6_1_0() { return cTooltipEStringParserRuleCall_6_1_0; }
		
		//('description:' description=EString)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'description:'
		public Keyword getDescriptionKeyword_7_0() { return cDescriptionKeyword_7_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_7_1() { return cDescriptionAssignment_7_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_7_1_0() { return cDescriptionEStringParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.Binding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTextPropertyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cValuePropertyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLocalDateTimePropertyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLocalDatePropertyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStylePropertyKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Binding Binding:
		//	'textProperty' | 'valueProperty' | 'localDateTimeProperty' | 'localDateProperty' | 'styleProperty';
		@Override public ParserRule getRule() { return rule; }
		
		//'textProperty' | 'valueProperty' | 'localDateTimeProperty' | 'localDateProperty' | 'styleProperty'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'textProperty'
		public Keyword getTextPropertyKeyword_0() { return cTextPropertyKeyword_0; }
		
		//'valueProperty'
		public Keyword getValuePropertyKeyword_1() { return cValuePropertyKeyword_1; }
		
		//'localDateTimeProperty'
		public Keyword getLocalDateTimePropertyKeyword_2() { return cLocalDateTimePropertyKeyword_2; }
		
		//'localDateProperty'
		public Keyword getLocalDatePropertyKeyword_3() { return cLocalDatePropertyKeyword_3; }
		
		//'styleProperty'
		public Keyword getStylePropertyKeyword_4() { return cStylePropertyKeyword_4; }
	}
	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepositoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRepositoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cJdbcUrlKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cJdbcUrlAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cJdbcUrlEStringParserRuleCall_3_1_0 = (RuleCall)cJdbcUrlAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGenerateDummyInsertKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGenerateDummyInsertAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGenerateDummyInsertEBooleanParserRuleCall_4_1_0 = (RuleCall)cGenerateDummyInsertAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cStatementAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cStatementSQLStatementParserRuleCall_5_0_0 = (RuleCall)cStatementAssignment_5_0.eContents().get(0);
		private final Assignment cStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementSQLStatementParserRuleCall_5_1_0 = (RuleCall)cStatementAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Repository:
		//	{Repository}
		//	'Repository'
		//	'{' ('jdbcUrl:' jdbcUrl=EString ','?)? ('generateDummyInsert:' generateDummyInsert=EBoolean ','?)?
		//	(statement+=SQLStatement statement+=SQLStatement*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Repository} 'Repository' '{' ('jdbcUrl:' jdbcUrl=EString ','?)? ('generateDummyInsert:' generateDummyInsert=EBoolean
		//','?)? (statement+=SQLStatement statement+=SQLStatement*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Repository}
		public Action getRepositoryAction_0() { return cRepositoryAction_0; }
		
		//'Repository'
		public Keyword getRepositoryKeyword_1() { return cRepositoryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('jdbcUrl:' jdbcUrl=EString ','?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'jdbcUrl:'
		public Keyword getJdbcUrlKeyword_3_0() { return cJdbcUrlKeyword_3_0; }
		
		//jdbcUrl=EString
		public Assignment getJdbcUrlAssignment_3_1() { return cJdbcUrlAssignment_3_1; }
		
		//EString
		public RuleCall getJdbcUrlEStringParserRuleCall_3_1_0() { return cJdbcUrlEStringParserRuleCall_3_1_0; }
		
		//','?
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//('generateDummyInsert:' generateDummyInsert=EBoolean ','?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'generateDummyInsert:'
		public Keyword getGenerateDummyInsertKeyword_4_0() { return cGenerateDummyInsertKeyword_4_0; }
		
		//generateDummyInsert=EBoolean
		public Assignment getGenerateDummyInsertAssignment_4_1() { return cGenerateDummyInsertAssignment_4_1; }
		
		//EBoolean
		public RuleCall getGenerateDummyInsertEBooleanParserRuleCall_4_1_0() { return cGenerateDummyInsertEBooleanParserRuleCall_4_1_0; }
		
		//','?
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//(statement+=SQLStatement statement+=SQLStatement*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//statement+=SQLStatement
		public Assignment getStatementAssignment_5_0() { return cStatementAssignment_5_0; }
		
		//SQLStatement
		public RuleCall getStatementSQLStatementParserRuleCall_5_0_0() { return cStatementSQLStatementParserRuleCall_5_0_0; }
		
		//statement+=SQLStatement*
		public Assignment getStatementAssignment_5_1() { return cStatementAssignment_5_1; }
		
		//SQLStatement
		public RuleCall getStatementSQLStatementParserRuleCall_5_1_0() { return cStatementSQLStatementParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SQLStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.entity.lang.EntityDsl.SQLStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSQLStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSQLStatementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cQueryKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQueryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQueryEStringParserRuleCall_4_1_0 = (RuleCall)cQueryAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnValueKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnValueJvmTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cReturnValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SQLStatement:
		//	{SQLStatement}
		//	'SQLStatement'
		//	'(' ('name:' name=EString ','?)? ('query:' query=EString ','?)? ('returnValue:' returnValue=JvmTypeReference)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SQLStatement} 'SQLStatement' '(' ('name:' name=EString ','?)? ('query:' query=EString ','?)? ('returnValue:'
		//returnValue=JvmTypeReference)? ')'
		public Group getGroup() { return cGroup; }
		
		//{SQLStatement}
		public Action getSQLStatementAction_0() { return cSQLStatementAction_0; }
		
		//'SQLStatement'
		public Keyword getSQLStatementKeyword_1() { return cSQLStatementKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('name:' name=EString ','?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'name:'
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }
		
		//name=EString
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_1_0() { return cNameEStringParserRuleCall_3_1_0; }
		
		//','?
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//('query:' query=EString ','?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'query:'
		public Keyword getQueryKeyword_4_0() { return cQueryKeyword_4_0; }
		
		//query=EString
		public Assignment getQueryAssignment_4_1() { return cQueryAssignment_4_1; }
		
		//EString
		public RuleCall getQueryEStringParserRuleCall_4_1_0() { return cQueryEStringParserRuleCall_4_1_0; }
		
		//','?
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//('returnValue:' returnValue=JvmTypeReference)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'returnValue:'
		public Keyword getReturnValueKeyword_5_0() { return cReturnValueKeyword_5_0; }
		
		//returnValue=JvmTypeReference
		public Assignment getReturnValueAssignment_5_1() { return cReturnValueAssignment_5_1; }
		
		//JvmTypeReference
		public RuleCall getReturnValueJvmTypeReferenceParserRuleCall_5_1_0() { return cReturnValueJvmTypeReferenceParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	
	
	private final EntityElements pEntity;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final EDoubleElements pEDouble;
	private final FieldElements pField;
	private final FXControlElements pFXControl;
	private final BindingElements pBinding;
	private final RepositoryElements pRepository;
	private final SQLStatementElements pSQLStatement;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public EntityDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pEntity = new EntityElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pEDouble = new EDoubleElements();
		this.pField = new FieldElements();
		this.pFXControl = new FXControlElements();
		this.pBinding = new BindingElements();
		this.pRepository = new RepositoryElements();
		this.pSQLStatement = new SQLStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.dc.entity.lang.EntityDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Entity:
	//	{Entity} ('packagePath' packagePath=QualifiedName)?
	//	'Entity'
	//	name=EString
	//	'{' ('useSpring:' useSpring=EBoolean)? ('useHistory:' useHistory=EBoolean)? (field+=Field field+=Field*)?
	//	repository=Repository?
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	INT ('.' INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//Field:
	//	{Field}
	//	'Field'
	//	'(' ('name:' name=EString ','?)? ('datatype:' datatype=JvmTypeReference ','?)? ('required:' required=EBoolean ','?)?
	//	('useByTableView:' useByTableView=EBoolean ','?)? ('useByRepository:' useByRepository=EBoolean)?
	//	')'
	//	control=FXControl?;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//FXControl:
	//	{FXControl}
	//	'[' ('name:' name=EString ','?)? ('control:' control=JvmTypeReference ','?)? ('columnWidth:' columnWidth=EDouble
	//	','?)? ('binding:' binding=Binding ','?)? ('tooltip:' tooltip=EString)? ('description:' description=EString)?
	//	']';
	public FXControlElements getFXControlAccess() {
		return pFXControl;
	}
	
	public ParserRule getFXControlRule() {
		return getFXControlAccess().getRule();
	}
	
	//Binding Binding:
	//	'textProperty' | 'valueProperty' | 'localDateTimeProperty' | 'localDateProperty' | 'styleProperty';
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//Repository:
	//	{Repository}
	//	'Repository'
	//	'{' ('jdbcUrl:' jdbcUrl=EString ','?)? ('generateDummyInsert:' generateDummyInsert=EBoolean ','?)?
	//	(statement+=SQLStatement statement+=SQLStatement*)?
	//	'}';
	public RepositoryElements getRepositoryAccess() {
		return pRepository;
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}
	
	//SQLStatement:
	//	{SQLStatement}
	//	'SQLStatement'
	//	'(' ('name:' name=EString ','?)? ('query:' query=EString ','?)? ('returnValue:' returnValue=JvmTypeReference)?
	//	')';
	public SQLStatementElements getSQLStatementAccess() {
		return pSQLStatement;
	}
	
	public ParserRule getSQLStatementRule() {
		return getSQLStatementAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
