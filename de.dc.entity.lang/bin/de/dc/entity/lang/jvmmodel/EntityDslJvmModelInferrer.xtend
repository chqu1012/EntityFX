/*
 * generated by Xtext 2.17.0
 */
package de.dc.entity.lang.jvmmodel

import com.google.inject.Inject
import de.dc.entity.model.Entity
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import java.util.List
import javafx.beans.property.SimpleObjectProperty
import java.util.ArrayList

/**
 * <p>Infers a JVM model from the source model.</p> 
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class EntityDslJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder

	def dispatch void infer(Entity element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		// Here you explain how your model is mapped to Java elements, by writing the actual translation code.
//		acceptor.accept(element.toClass(element.packagePath + '.model.' + element.name)) [
//			element.field.forEach [ f |
//				members += element.toField(f.name.toFirstLower, f.datatype)
//				members += element.toGetter(f.name.toFirstLower, f.datatype)
//				members += element.toSetter(f.name.toFirstLower, f.datatype)
//			]
//		]
//		
//		acceptor.accept(element.toClass(element.packagePath + '.model.' + element.name+"FX")) [
//				val entityClass = typeRef(element.packagePath + '.model.' + element.name)
//				members += element.toField(element.name.toFirstLower, entityClass)
//				members += element.toConstructor[ body = '''this(new «entityClass»());''']
//				members += element.toConstructor[ 
//					parameters += element.toParameter(element.name.toFirstLower, entityClass)
//					body = '''this.«element.name.toFirstLower»=«element.name.toFirstLower»;'''
//				]
//				members += element.toMethod('get'+element.name.toFirstUpper, entityClass, [
//					val name = element.name.toFirstLower
//					body = '''
//					«FOR field : element.field»
//					this.«name».set«field.name.toFirstUpper»(«field.name.toFirstLower»Property.getValue());
//					«ENDFOR»
//					return this.«name»;
//					'''
//				])
//				members += element.toMethod('toString', String.typeRef,[
//					body = '''return  org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(get«element.name»());'''
//				])
//				
//				
//			element.field.forEach [ f |
//				members += element.toField(f.name.toFirstLower+'Property', javafx.beans.property.Property.typeRef(f.datatype))[
//					initializer = '''new «SimpleObjectProperty.typeRef(f.datatype)»()'''
//				]
//				members += element.toGetter(f.name.toFirstLower+'Property', javafx.beans.property.Property.typeRef(f.datatype))
//				members += element.toSetter(f.name.toFirstLower+'Property', javafx.beans.property.Property.typeRef(f.datatype))
//				members += element.toMethod('get'+f.name, f.datatype, [ body = '''return this.«f.name.toFirstLower»Property.getValue();'''])
//				members += element.toMethod('set'+f.name, void.typeRef, [ 
//					parameters += element.toParameter(f.name.toFirstLower, f.datatype)
//					body = '''this.«f.name.toFirstLower»Property.setValue(«f.name.toFirstLower»);'''
//				])
//			]
//		]
//		
//		// Repository
//		acceptor.accept(element.toClass(element.packagePath + '.repository.' + element.name + 'Repository')) [
//			
//		]
//
//		// SQL statement constants
//		acceptor.accept(element.toClass(element.packagePath + '.model.' + element.name + 'Constant')) [
//			members += element.toField('SQL_FIND_ALL', String.typeRef) [
//				static = true
//				final = true
//				visibility = JvmVisibility::PUBLIC
//				initializer = '''"SELECT * FROM «element.name» ORDER BY id DESC"'''
//			]
//			members += element.toField('SQL_FIND_BY_ID', String.typeRef) [
//				static = true
//				final = true
//				visibility = JvmVisibility::PUBLIC
//				initializer = '''"SELECT * FROM «element.name» WHERE id = %s"'''
//			]
//			members += element.toField('SQL_INSERT', String.typeRef) [
//				static = true
//				final = true
//				visibility = JvmVisibility::PUBLIC
//				val parameters = element.field.filter[it.isUseByRepository].map[it.name].reduce[p1, p2|p1 + ', ' + p2]
//				val parametersLength = element.field.filter[it.isUseByRepository].map['?'].reduce[p1, p2|p1 + ', ' + p2]
//				initializer = '''"INSERT INTO «element.name» («parameters») VALUES («parametersLength»)"'''
//			]
//			members += element.toField('SQL_MERGE', String.typeRef) [
//				static = true
//				final = true
//				visibility = JvmVisibility::PUBLIC
//				val parametersLength = element.field.filter[it.isUseByRepository].map['?'].reduce[p1, p2|p1 + ', ' + p2]
//				initializer = '''"MERGE INTO «element.name» KEY (ID) VALUES (?, «parametersLength»)"'''
//			]
//			members += element.toField('SQL_UPDATE_BY_ID', String.typeRef) [
//				static = true
//				final = true
//				visibility = JvmVisibility::PUBLIC
//				initializer = '''"UPDATE «element.name» SET status_id=? WHERE id = ?"'''
//			]
//			members += element.toField('SQL_CREATE', String.typeRef) [
//				static = true
//				final = true
//				visibility = JvmVisibility::PUBLIC
//				val parameters = element.field.filter[it.isUseByRepository].map[it.name+' '+it.datatype.simpleName].reduce[p1, p2|p1 + ', ' + p2]
//				initializer = '''"CREATE TABLE IF NOT EXISTS «element.name»(ID BIGINT AUTO_INCREMENT, «parameters»);"'''
//			]
//			element.repository.statement.forEach [ s |
//				members += element.toField('SQL_' + s.name.splitCamelCaseString.map[it].reduce[p1, p2|p1+'_'+p2].toFirstUpper, String.typeRef) [
//					static = true
//					final = true
//					visibility = JvmVisibility::PUBLIC
//					initializer = '''"«s.query»"'''
//				]
//			]
//		]
	}

	def static splitCamelCaseString(String s) {
		s.split("(?<!(^|[A-Z]))(?=[A-Z])|(?<!^)(?=[A-Z][a-z])")
	}
}
